(function(){
/*
	Backbone.FormsEngine
	By Eyal Weiss
    https://github.com/ewebdev/Backbone.FormsEngine
*/


// Chosen, a Select Box Enhancer for jQuery and Protoype
// by Patrick Filler for Harvest, http://getharvest.com
// 
// Version 0.9.8
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function() {
  var SelectParser;

  SelectParser = (function() {

    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: group.label,
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) this.parsed[group_position].children += 1;
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  this.SelectParser = SelectParser;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/

(function() {
  var AbstractChosen, root;

  root = this;

  AbstractChosen = (function() {

    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      this.set_default_values();
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.finish_setup();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.search_contains = this.options.search_contains || false;
      this.choices = 0;
      this.single_backstroke_delete = this.options.single_backstroke_delete || false;
      return this.max_selected_options = this.options.max_selected_options || Infinity;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || "Select Some Options";
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || "Select an Option";
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || "No results match";
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout((function() {
            return _this.container_mousedown();
          }), 50);
        }
      } else {
        if (!this.active_field) return this.activate_field();
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, style;
      if (!option.disabled) {
        option.dom_id = this.container_id + "_o_" + option.array_index;
        classes = option.selected && this.is_multiple ? [] : ["active-result"];
        if (option.selected) classes.push("result-selected");
        if (option.group_array_index != null) classes.push("group-option");
        if (option.classes !== "") classes.push(option.classes);
        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
      } else {
        return "";
      }
    };

    AbstractChosen.prototype.results_update_field = function() {
      if (!this.is_multiple) this.results_reset_cleanup();
      this.result_clear_highlight();
      this.result_single_selected = null;
      return this.results_build();
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) return this.result_select(evt);
          break;
        case 27:
          if (this.results_showing) this.results_hide();
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.generate_field_id = function() {
      var new_id;
      new_id = this.generate_random_id();
      this.form_field.id = new_id;
      return new_id;
    };

    AbstractChosen.prototype.generate_random_char = function() {
      var chars, newchar, rand;
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      rand = Math.floor(Math.random() * chars.length);
      return newchar = chars.substring(rand, rand + 1);
    };

    return AbstractChosen;

  })();

  root.AbstractChosen = AbstractChosen;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/

(function() {
  var $, Chosen, get_side_border_padding, root,
    __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  root = this;

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      if ($.browser.msie && ($.browser.version === "6.0" || ($.browser.version === "7.0" && document.documentMode === 7))) {
        return this;
      }
      return this.each(function(input_field) {
        var $this;
        $this = $(this);
        if (!$this.hasClass("chzn-done")) {
          return $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(_super) {

    __extends(Chosen, _super);

    function Chosen() {
      Chosen.__super__.constructor.apply(this, arguments);
    }

    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      this.current_value = this.form_field_jq.val();
      return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
    };

    Chosen.prototype.finish_setup = function() {
      return this.form_field_jq.addClass("chzn-done");
    };

    Chosen.prototype.set_up_html = function() {
      var container_div, dd_top, dd_width, sf_width;
      this.container_id = this.form_field.id.length ? this.form_field.id.replace(/[^\w]/g, '_') : this.generate_field_id();
      this.container_id += "_chzn";
      this.f_width = this.form_field_jq.outerWidth();
      container_div = $("<div />", {
        id: this.container_id,
        "class": "chzn-container" + (this.is_rtl ? ' chzn-rtl' : ''),
        style: 'width: ' + this.f_width + 'px;'
      });
      if (this.is_multiple) {
        container_div.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop" style="left:-9000px;"><ul class="chzn-results"></ul></div>');
      } else {
        container_div.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop" style="left:-9000px;"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
      }
      this.form_field_jq.hide().after(container_div);
      this.container = $('#' + this.container_id);
      this.container.addClass("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      this.dropdown = this.container.find('div.chzn-drop').first();
      dd_top = this.container.height();
      dd_width = this.f_width - get_side_border_padding(this.dropdown);
      this.dropdown.css({
        "width": dd_width + "px",
        "top": dd_top + "px"
      });
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chzn-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chzn-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chzn-search').first();
        this.selected_item = this.container.find('.chzn-single').first();
        sf_width = dd_width - get_side_border_padding(this.search_container) - get_side_border_padding(this.search_field);
        this.search_field.css({
          "width": sf_width + "px"
        });
      }
      this.results_build();
      this.set_tab_index();
      return this.form_field_jq.trigger("liszt:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.mousedown(function(evt) {
        return _this.container_mousedown(evt);
      });
      this.container.mouseup(function(evt) {
        return _this.container_mouseup(evt);
      });
      this.container.mouseenter(function(evt) {
        return _this.mouse_enter(evt);
      });
      this.container.mouseleave(function(evt) {
        return _this.mouse_leave(evt);
      });
      this.search_results.mouseup(function(evt) {
        return _this.search_results_mouseup(evt);
      });
      this.search_results.mouseover(function(evt) {
        return _this.search_results_mouseover(evt);
      });
      this.search_results.mouseout(function(evt) {
        return _this.search_results_mouseout(evt);
      });
      this.form_field_jq.bind("liszt:updated", function(evt) {
        return _this.results_update_field(evt);
      });
      this.form_field_jq.bind("liszt:activate", function(evt) {
        return _this.activate_field(evt);
      });
      this.form_field_jq.bind("liszt:open", function(evt) {
        return _this.container_mousedown(evt);
      });
      this.search_field.blur(function(evt) {
        return _this.input_blur(evt);
      });
      this.search_field.keyup(function(evt) {
        return _this.keyup_checker(evt);
      });
      this.search_field.keydown(function(evt) {
        return _this.keydown_checker(evt);
      });
      this.search_field.focus(function(evt) {
        return _this.input_focus(evt);
      });
      if (this.is_multiple) {
        return this.search_choices.click(function(evt) {
          return _this.choices_click(evt);
        });
      } else {
        return this.container.click(function(evt) {
          return evt.preventDefault();
        });
      }
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field_jq[0].disabled;
      if (this.is_disabled) {
        this.container.addClass('chzn-disabled');
        this.search_field[0].disabled = true;
        if (!this.is_multiple) {
          this.selected_item.unbind("focus", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClass('chzn-disabled');
        this.search_field[0].disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.bind("focus", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      var target_closelink;
      if (!this.is_disabled) {
        target_closelink = evt != null ? ($(evt.target)).hasClass("search-choice-close") : false;
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.stopPropagation();
        }
        if (!this.pending_destroy_click && !target_closelink) {
          if (!this.active_field) {
            if (this.is_multiple) this.search_field.val("");
            $(document).click(this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chzn-single").length)) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        } else {
          return this.pending_destroy_click = false;
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chzn-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      $(document).unbind("click", this.click_test_action);
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chzn-container-active");
      this.winnow_results_clear();
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      this.container.addClass("chzn-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      if ($(evt.target).parents('#' + this.container_id).length) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      var content, data, _i, _len, _ref;
      this.parsing = true;
      this.results_data = root.SelectParser.select_to_array(this.form_field);
      if (this.is_multiple && this.choices > 0) {
        this.search_choices.find("li.search-choice").remove();
        this.choices = 0;
      } else if (!this.is_multiple) {
        this.selected_item.addClass("chzn-default").find("span").text(this.default_text);
        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
          this.container.addClass("chzn-container-single-nosearch");
        } else {
          this.container.removeClass("chzn-container-single-nosearch");
        }
      }
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content += this.result_add_group(data);
        } else if (!data.empty) {
          content += this.result_add_option(data);
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.selected_item.removeClass("chzn-default").find("span").text(data.text);
            if (this.allow_single_deselect) this.single_deselect_control_build();
          }
        }
      }
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      this.search_results.html(content);
      return this.parsing = false;
    };

    Chosen.prototype.result_add_group = function(group) {
      if (!group.disabled) {
        group.dom_id = this.container_id + "_g_" + group.array_index;
        return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + '</li>';
      } else {
        return "";
      }
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) this.result_highlight.removeClass("highlighted");
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      var dd_top;
      if (!this.is_multiple) {
        this.selected_item.addClass("chzn-single-with-drop");
        if (this.result_single_selected) {
          this.result_do_highlight(this.result_single_selected);
        }
      } else if (this.max_selected_options <= this.choices) {
        this.form_field_jq.trigger("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      dd_top = this.is_multiple ? this.container.height() : this.container.height() - 1;
      this.form_field_jq.trigger("liszt:showing_dropdown", {
        chosen: this
      });
      this.dropdown.css({
        "top": dd_top + "px",
        "left": 0
      });
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.search_field.val());
      return this.winnow_results();
    };

    Chosen.prototype.results_hide = function() {
      if (!this.is_multiple) {
        this.selected_item.removeClass("chzn-single-with-drop");
      }
      this.result_clear_highlight();
      this.form_field_jq.trigger("liszt:hiding_dropdown", {
        chosen: this
      });
      this.dropdown.css({
        "left": "-9000px"
      });
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field_jq.attr("tabindex")) {
        ti = this.form_field_jq.attr("tabindex");
        this.form_field_jq.attr("tabindex", -1);
        return this.search_field.attr("tabindex", ti);
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) return this.result_do_highlight(target);
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (this.active_field && !($(evt.target).hasClass("search-choice" || $(evt.target).parents('.search-choice').first)) && !this.results_showing) {
        return this.results_show();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice_id, html, link,
        _this = this;
      if (this.is_multiple && this.max_selected_options <= this.choices) {
        this.form_field_jq.trigger("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      choice_id = this.container_id + "_c_" + item.array_index;
      this.choices += 1;
      if (item.disabled) {
        html = '<li class="search-choice search-choice-disabled" id="' + choice_id + '"><span>' + item.html + '</span></li>';
      } else {
        html = '<li class="search-choice" id="' + choice_id + '"><span>' + item.html + '</span><a href="javascript:void(0)" class="search-choice-close" rel="' + item.array_index + '"></a></li>';
      }
      this.search_container.before(html);
      link = $('#' + choice_id).find("a").first();
      return link.click(function(evt) {
        return _this.choice_destroy_link_click(evt);
      });
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      if (!this.is_disabled) {
        this.pending_destroy_click = true;
        return this.choice_destroy($(evt.target));
      } else {
        return evt.stopPropagation;
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      if (this.result_deselect(link.attr("rel"))) {
        this.choices -= 1;
        this.show_search_field_default();
        if (this.is_multiple && this.choices > 0 && this.search_field.val().length < 1) {
          this.results_hide();
        }
        return link.parents('li').first().remove();
      }
    };

    Chosen.prototype.results_reset = function() {
      this.form_field.options[0].selected = true;
      this.selected_item.find("span").text(this.default_text);
      if (!this.is_multiple) this.selected_item.addClass("chzn-default");
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.form_field_jq.trigger("change");
      if (this.active_field) return this.results_hide();
    };

    Chosen.prototype.results_reset_cleanup = function() {
      this.current_value = this.form_field_jq.val();
      return this.selected_item.find("abbr").remove();
    };

    Chosen.prototype.result_select = function(evt) {
      var high, high_id, item, position;
      if (this.result_highlight) {
        high = this.result_highlight;
        high_id = high.attr("id");
        this.result_clear_highlight();
        if (this.is_multiple) {
          this.result_deactivate(high);
        } else {
          this.search_results.find(".result-selected").removeClass("result-selected");
          this.result_single_selected = high;
          this.selected_item.removeClass("chzn-default");
        }
        high.addClass("result-selected");
        position = high_id.substr(high_id.lastIndexOf("_") + 1);
        item = this.results_data[position];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.selected_item.find("span").first().text(item.text);
          if (this.allow_single_deselect) this.single_deselect_control_build();
        }
        if (!(evt.metaKey && this.is_multiple)) this.results_hide();
        this.search_field.val("");
        if (this.is_multiple || this.form_field_jq.val() !== this.current_value) {
          this.form_field_jq.trigger("change", {
            'selected': this.form_field.options[item.options_index].value
          });
        }
        this.current_value = this.form_field_jq.val();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.result_activate = function(el) {
      return el.addClass("active-result");
    };

    Chosen.prototype.result_deactivate = function(el) {
      return el.removeClass("active-result");
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result, result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        result = $("#" + this.container_id + "_o_" + pos);
        result.removeClass("result-selected").addClass("active-result").show();
        this.result_clear_highlight();
        this.winnow_results();
        this.form_field_jq.trigger("change", {
          deselected: this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (this.allow_single_deselect && this.selected_item.find("abbr").length < 1) {
        return this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
      }
    };

    Chosen.prototype.winnow_results = function() {
      var found, option, part, parts, regex, regexAnchor, result, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len2, _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.search_field.val() === this.default_text ? "" : $('<div/>').text($.trim(this.search_field.val())).html();
      regexAnchor = this.search_contains ? "" : "^";
      regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.disabled && !option.empty) {
          if (option.group) {
            $('#' + option.dom_id).css('display', 'none');
          } else if (!(this.is_multiple && option.selected)) {
            found = false;
            result_id = option.dom_id;
            result = $("#" + result_id);
            if (regex.test(option.html)) {
              found = true;
              results += 1;
            } else if (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0) {
              parts = option.html.replace(/\[|\]/g, "").split(" ");
              if (parts.length) {
                for (_j = 0, _len2 = parts.length; _j < _len2; _j++) {
                  part = parts[_j];
                  if (regex.test(part)) {
                    found = true;
                    results += 1;
                  }
                }
              }
            }
            if (found) {
              if (searchText.length) {
                startpos = option.html.search(zregex);
                text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
                text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              } else {
                text = option.html;
              }
              result.html(text);
              this.result_activate(result);
              if (option.group_array_index != null) {
                $("#" + this.results_data[option.group_array_index].dom_id).css('display', 'list-item');
              }
            } else {
              if (this.result_highlight && result_id === this.result_highlight.attr('id')) {
                this.result_clear_highlight();
              }
              this.result_deactivate(result);
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        return this.no_results(searchText);
      } else {
        return this.winnow_results_set_highlight();
      }
    };

    Chosen.prototype.winnow_results_clear = function() {
      var li, lis, _i, _len, _results;
      this.search_field.val("");
      lis = this.search_results.find("li");
      _results = [];
      for (_i = 0, _len = lis.length; _i < _len; _i++) {
        li = lis[_i];
        li = $(li);
        if (li.hasClass("group-result")) {
          _results.push(li.css('display', 'auto'));
        } else if (!this.is_multiple || !li.hasClass("result-selected")) {
          _results.push(this.result_activate(li));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;
      if (!this.result_highlight) {
        selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
        do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
        if (do_high != null) return this.result_do_highlight(do_high);
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var no_results_html;
      no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
      no_results_html.find("span").first().html(terms);
      return this.search_results.append(no_results_html);
    };

    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };

    Chosen.prototype.keydown_arrow = function() {
      var first_active, next_sib;
      if (!this.result_highlight) {
        first_active = this.search_results.find("li.active-result").first();
        if (first_active) this.result_do_highlight($(first_active));
      } else if (this.results_showing) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) this.result_do_highlight(next_sib);
      }
      if (!this.results_showing) return this.results_show();
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices > 0) this.results_hide();
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container.siblings("li.search-choice").last();
        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) this.clear_backstroke();
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.val().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) this.result_select(evt);
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var dd_top, div, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.css(style) + ";";
        }
        div = $('<div />', {
          'style': style_block
        });
        div.text(this.search_field.val());
        $('body').append(div);
        w = div.width() + 25;
        div.remove();
        if (w > this.f_width - 10) w = this.f_width - 10;
        this.search_field.css({
          'width': w + 'px'
        });
        dd_top = this.container.height();
        return this.dropdown.css({
          "top": dd_top + "px"
        });
      }
    };

    Chosen.prototype.generate_random_id = function() {
      var string;
      string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
      while ($("#" + string).length > 0) {
        string += this.generate_random_char();
      }
      return string;
    };

    return Chosen;

  })(AbstractChosen);

  get_side_border_padding = function(elmt) {
    var side_border_padding;
    return side_border_padding = elmt.outerWidth() - elmt.width();
  };

  root.get_side_border_padding = get_side_border_padding;

}).call(this);

// Validation part was forked from Backbone.Validation

// Default options
// ---------------

var defaultOptions = {
	forceUpdate: false,
	selector: 'name',
	labelFormatter: 'sentenceCase',
	valid: Function.prototype,
	invalid: Function.prototype
};


var Validation = {};


Validation.validate = function (fieldName, value, rules, data, fieldCaption) {
	if (rules) {
		return validateAttr(rules, fieldCaption, value, data, fieldCaption);
	}
//	if (typeof errors === 'array') {
//		return _.filter(errors, function (v) {
//			return v !== null;
//		});
//	}
};

// Helper functions
// ----------------

// Formatting functions used for formatting error messages
var formatFunctions = {
	// Uses the configured label formatter to format the attribute name
	// to make it more readable for the user
	formatLabel: function (attrName, model) {
		return defaultLabelFormatters[defaultOptions.labelFormatter](attrName, model);
	},

	// Replaces nummeric placeholders like {0} in a string with arguments
	// passed to the function
	format: function () {
		var args = Array.prototype.slice.call(arguments);
		var text = args.shift();
		return text.replace(/\{(\d+)\}/g, function (match, number) {
			return typeof args[number] !== 'undefined' ? args[number] : match;
		});
	}
};

// Looks on the model for validations for a specified
// attribute. Returns an array of any validators defined,
// or an empty array if none is defined.
var getValidators = function (rules, attr) {
	var attrValidationSet = rules;

	// If the validator is a function or a string, wrap it in a function validator
	if (_.isFunction(attrValidationSet) || _.isString(attrValidationSet)) {
		attrValidationSet = {
			fn: attrValidationSet
		};
	}

	// Stick the validator object into an array
	if (!_.isArray(attrValidationSet)) {
		attrValidationSet = [attrValidationSet];
	}

	// Reduces the array of validators into a new array with objects
	// with a validation method to call, the value to validate against
	// and the specified error message, if any
	return _.reduce(attrValidationSet, function (memo, attrValidation) {
		_.each(_.without(_.keys(attrValidation), 'msg'), function (validator) {
			memo.push({
				fn: defaultValidators[validator],
				val: attrValidation[validator],
				msg: attrValidation.msg
			});
		});
		return memo;
	}, []);
};

// Validates an attribute against all validators defined
// for that attribute. If one or more errors are found,
// the first error message is returned.
// If the attribute is valid, an empty string is returned.
var validateAttr = function (rules, attr, value, computed, fieldCaption) {
	// Reduces the array of validators to an error message by
	// applying all the validators and returning the first error
	// message, if any.
	return _.reduce(getValidators(rules, attr), function (memo, validator) {
		// Pass the format functions plus the default
		// validators as the context to the validator
		var ctx = _.extend({}, formatFunctions, defaultValidators),
			result = validator.fn.call(ctx, value, attr, validator.val, attr, computed);

		if (result === false || memo === false) {
			return false;
		}
		if (result && !memo) {
			return validator.msg || result;
		}
		return memo;
	}, null);
};


// Patterns
// --------

var defaultPatterns = Validation.patterns = {
	// Matches any digit(s) (i.e. 0-9)
	digits: /^\d+$/,

	// Matched any number (e.g. 100.000)
	number: /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/,

	// Matches a valid email address (e.g. mail@example.com)
	email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,

	// Mathes any valid url (e.g. http://www.xample.com)
	url: /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
};


// Error messages
// --------------

// Error message for the build in validators.
// {x} gets swapped out with arguments form the validator.
var defaultMessages = Validation.messages = {
	required: '{0} is required',
	acceptance: '{0} must be accepted',
	min: '{0} must be greater than or equal to {1}',
	max: '{0} must be less than or equal to {1}',
	range: '{0} must be between {1} and {2}',
	length: '{0} must be {1} characters',
	minLength: '{0} must be at least {1} characters',
	maxLength: '{0} must be at most {1} characters',
	rangeLength: '{0} must be between {1} and {2} characters',
	oneOf: '{0} must be one of: {1}',
	equalTo: '{0} must be the same as {1}',
	pattern: '{0} must be a valid {1}'
};

// Label formatters
// ----------------

// Label formatters are used to convert the attribute name
// to a more human friendly label when using the built in
// error messages.
// Configure which one to use with a call to
//
//     Backbone.Validation.configure({
//       labelFormatter: 'label'
//     });
var defaultLabelFormatters = Validation.labelFormatters = {

	// Returns the attribute name with applying any formatting
	none: function (attrName) {
		return attrName;
	},

	// Converts attributeName or attribute_name to Attribute name
	sentenceCase: function (attrName) {
		return attrName.replace(/(?:^\w|[A-Z]|\b\w)/g,function (match, index) {
			return index === 0 ? match.toUpperCase() : ' ' + match.toLowerCase();
		}).replace('_', ' ');
	},

	// Looks for a label configured on the model and returns it
	//
	//      var Model = Backbone.Model.extend({
	//        validation: {
	//          someAttribute: {
	//            required: true
	//          }
	//        },
	//
	//        labels: {
	//          someAttribute: 'Custom label'
	//        }
	//      });
	label: function (attrName) {
		return defaultLabelFormatters.sentenceCase(attrName);
	}
};


var getFlat = function(key, data) {
	var s = key.split('.');
	var p;
	var k = data;
	while ((p = s.shift()) && k) {
		k = k[p]
	}
	return k;
};

// Built in validators
// -------------------

var defaultValidators = Validation.validators = (function () {
	// Use native trim when defined
	var trim = String.prototype.trim ?
		function (text) {
			return text === null ? '' : String.prototype.trim.call(text);
		} :
		function (text) {
			var trimLeft = /^\s+/,
				trimRight = /\s+$/;

			return text === null ? '' : text.toString().replace(trimLeft, '').replace(trimRight, '');
		};

	// Determines whether or not a value is a number
	var isNumber = function (value) {
		return _.isNumber(value) || (_.isString(value) && value.match(defaultPatterns.number));
	};

	// Determines whether or not not a value is empty
	var hasValue = function (value) {
		return !(_.isNull(value) || _.isUndefined(value) || (_.isString(value) && trim(value) === ''));
	};

	return {
		// Function validator
		// Lets you implement a custom function used for validation
		fn: function (value, attr, fn, fieldName, computed) {
			return fn.call(fieldName, value, attr, computed);
		},

		// Required validator
		// Validates if the attribute is required or not
		required: function (value, attr, required, fieldName, computed) {
			var isRequired = _.isFunction(required) ? required.call(model, value, attr, computed) : required;
			if (!isRequired && !hasValue(value)) {
				return false; // overrides all other validators
			}
			if (isRequired && !hasValue(value)) {
				return this.format(defaultMessages.required, fieldName);
			}
		},

		// Acceptance validator
		// Validates that something has to be accepted, e.g. terms of use
		// `true` or 'true' are valid
		acceptance: function (value, attr, accept, fieldName) {
			if (value !== 'true' && (!_.isBoolean(value) || value === false)) {
				return this.format(defaultMessages.acceptance, fieldName);
			}
		},

		// Min validator
		// Validates that the value has to be a number and equal to or greater than
		// the min value specified
		min: function (value, attr, minValue, fieldName) {
			if (!isNumber(value) || value < minValue) {
				return this.format(defaultMessages.min, fieldName, minValue);
			}
		},

		// Max validator
		// Validates that the value has to be a number and equal to or less than
		// the max value specified
		max: function (value, attr, maxValue, fieldName) {
			if (!isNumber(value) || value > maxValue) {
				return this.format(defaultMessages.max, fieldName, maxValue);
			}
		},

		// Range validator
		// Validates that the value has to be a number and equal to or between
		// the two numbers specified
		range: function (value, attr, range, fieldName) {
			if (!isNumber(value) || value < range[0] || value > range[1]) {
				return this.format(defaultMessages.range, fieldName, range[0], range[1]);
			}
		},

		// Length validator
		// Validates that the value has to be a string with length equal to
		// the length value specified
		length: function (value, attr, length, fieldName) {
			if (!hasValue(value) || trim(value).length !== length) {
				return this.format(defaultMessages.length, fieldName, length);
			}
		},

		// Min length validator
		// Validates that the value has to be a string with length equal to or greater than
		// the min length value specified
		minLength: function (value, attr, minLength, fieldName) {
			if (!hasValue(value) || trim(value).length < minLength) {
				return this.format(defaultMessages.minLength, fieldName, minLength);
			}
		},

		// Max length validator
		// Validates that the value has to be a string with length equal to or less than
		// the max length value specified
		maxLength: function (value, attr, maxLength, fieldName) {
			if (!hasValue(value) || trim(value).length > maxLength) {
				return this.format(defaultMessages.maxLength, fieldName, maxLength);
			}
		},

		// Range length validator
		// Validates that the value has to be a string and equal to or between
		// the two numbers specified
		rangeLength: function (value, attr, range, fieldName) {
			if (!hasValue(value) || trim(value).length < range[0] || trim(value).length > range[1]) {
				return this.format(defaultMessages.rangeLength, fieldName, range[0], range[1]);
			}
		},

		// One of validator
		// Validates that the value has to be equal to one of the elements in
		// the specified array. Case sensitive matching
		oneOf: function (value, attr, values, fieldName) {
			if (!_.include(values, value)) {
				return this.format(defaultMessages.oneOf, fieldName, values.join(', '));
			}
		},

		// Equal to validator
		// Validates that the value has to be equal to the value of the attribute
		// with the name specified
		equalTo: function (value, attr, equalTo, fieldName, computed) {
			if (value !== getFlat(equalTo, computed)) {
				return this.format(defaultMessages.equalTo, fieldName, this.formatLabel(equalTo, fieldName));
			}
		},

		// Pattern validator
		// Validates that the value has to match the pattern specified.
		// Can be a regular expression or the name of one of the built in patterns
		pattern: function (value, attr, pattern, fieldName) {
			if (typeof pattern === 'string') {
				var first = pattern.indexOf('/'),
					last = pattern.lastIndexOf('/');
				if (first === 0 && first !== last) {
					var r = pattern.slice(1, last),
						flags = pattern.substr(last + 1);
					pattern = new RegExp(r, flags);
				}
			}
			if (!hasValue(value) || !value.toString().match(defaultPatterns[pattern] || pattern)) {
				return this.format(defaultMessages.pattern, fieldName, pattern);
			}
		}
	};
}());


_.extend(Backbone.Events, {
  once: function(ev, callback, context) {
    var bindCallback;
    bindCallback = _.bind(function() {
      this.unbind(ev, bindCallback);
      return callback.apply(context || this, arguments);
    }, this);
    return this.bind(ev, bindCallback);
  }
});

Backbone.View.prototype.once = Backbone.Model.prototype.once = Backbone.Events.once;

Backbone.FormsEngine = {};


(function() {
  var FieldType, FieldsGroup, FormsEngine, fieldTypes;
  FormsEngine = Backbone.FormsEngine;
  FieldType = FormsEngine.FieldType = Backbone.View.extend({
    initialize: function(options) {
      var ev, rule, validation;
      this.name = (options.namePrefix ? options.namePrefix + '.' : '') + options.name;
      this.children = [];
      this.form = options.form;
      this.$el.addClass(options.type.toLowerCase() + '-field-wrapper');
      validation = options.validation;
      if (validation) {
        this.required = ((function() {
          var _i, _len, _ref, _results;
          _ref = options.validation;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rule = _ref[_i];
            if (rule && (rule.required === true || rule.minLength > 0)) {
              _results.push(rule);
            }
          }
          return _results;
        })()).length > 0;
      } else {
        this.required = false;
      }
      if (this.required) {
        this.$el.addClass('required');
      }
      ev = {};
      ev['keydown ' + this.fieldTagName] = function() {
        var _this = this;
        return setTimeout(function() {
          if (_this.get()) {
            return _this.validate();
          } else {
            return _this.clearValidation();
          }
        }, 10);
      };
      ev[this.changeEventName + ' ' + this.fieldTagName] = this.validate;
      ev['click .errors-block'] = this.clearValidation;
      return this.delegateEvents(ev);
    },
    changeEventName: 'change',
    fieldTagName: 'input',
    className: 'field-wrapper',
    inputType: void 0,
    template: _.template("<label for=\"<%=cid%>\" class=\"control-label\"><%-options.caption%></label>\n<div class=\"controls\">\n	<%=controlTemplate(this)%>\n</div>\n<span class=\"help-block\"><%-options.description || ''%></span>\n<span class=\"errors-block\" style=\"display: none;\"><div class=\"tip\" ></div><ul><%-options.errors || ''%></ul></span>"),
    controlTemplate: _.template("<<%-fieldTagName%> id=\"<%=cid%>\" name=\"<%=name%>\"<%=inputType ? ' type=\"' + inputType + '\"' : ''%><%=options.placeholder ? ' placeholder=\"' + options.placeholder + '\"' : ''%> tabindex=\"<%=options.tabindex%>\"></<%-fieldTagName%>"),
    validate: function() {
      var err, errors, errs;
      if (!this.form.data) {
        this.form.serialize();
      }
      errors = Validation.validate(this.name, this.get(), this.options.validation, this.form.data, this.options.caption || this.name);
      if (typeof errors === 'string') {
        errors = [errors];
      }
      if ((errors != null) && errors.length) {
        errs = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = errors.length; _i < _len; _i++) {
            err = errors[_i];
            _results.push("<li>" + err + "</li>");
          }
          return _results;
        })();
        this.$('.errors-block ul').html(errs.join('')).parent().show();
        this.$el.addClass('invalid');
        this.hasErrors = true;
      } else if (this.hasErrors) {
        this.clearValidation();
      }
      return errors;
    },
    clearValidation: function() {
      this.$('.errors-block').hide();
      this.$el.removeClass('invalid');
      return this.hasErrors = false;
    },
    get: function() {
      return this.$("" + this.fieldTagName + "[name='" + this.name + "']").val();
    },
    serialize: function() {
      var json;
      json = {};
      json[this.name] = this.get();
      return json;
    },
    render: function() {
      this.$el.html(this.template(this));
      this.$content = this.$el;
      FormsEngine.buildFields(this.options.items, this);
      if (typeof this.onRender === "function") {
        this.onRender();
      }
      return this;
    }
  });
  fieldTypes = FormsEngine.fieldTypes = {};
  fieldTypes.String = FieldType.extend({
    inputType: 'text'
  });
  fieldTypes.Text = FieldType.extend({
    fieldTagName: 'textarea'
  });
  fieldTypes.Password = FieldType.extend({
    inputType: 'password'
  });
  fieldTypes.Boolean = FieldType.extend({
    inputType: 'checkbox',
    changeEventName: 'click',
    serialize: function() {
      var json;
      json = {};
      json[this.name] = this.get();
      return json;
    },
    get: function() {
      return this.$("" + this.fieldTagName + "[name='" + this.name + "']").prop('checked');
    }
  });
  fieldTypes.Email = FieldType.extend({
    inputType: 'email'
  });
  fieldTypes.Url = FieldType.extend({
    inputType: 'url'
  });
  fieldTypes.Set = FieldType.extend({
    initialize: function(options) {
      FieldType.prototype.initialize.call(this, options);
      if (options.multiSelect != null) {
        if (typeof options.maxSelected === 'number') {
          options.multiSelect = options.maxSelected > 1;
        }
      } else {
        options.multiSelect = typeof options.maxSelected === 'number' && options.maxSelected > 1;
      }
      if (typeof options.maxSelected !== 'number') {
        options.maxSelected = options.multiSelect ? Infinity : 1;
      }
      if (options.items.length <= 6) {
        this.fieldTagName = 'input';
        return this.inputType = options.multiSelect ? 'checkbox' : 'radio';
      } else {
        return this.fieldTagName = 'select';
      }
    },
    get: function() {
      if (this.fieldTagName === 'select') {
        return this.$("select").val();
      } else if (this.inputType === 'radio') {
        return this.$("input:checked").val();
      } else {
        return this.$("input:checked").map(function() {
          return $(this).val();
        }).toArray();
      }
    },
    controlTemplate: _.template("<% if (fieldTagName === 'select') { %>\n	<select name=\"<%=name%>\"<%=options.multiSelect ? ' multiple' : ''%> data-max-selected=\"<%=options.maxSelected === Infinity ? undefined : options.maxSelected%>\" class=\"chzn-select\"<%=options.placeholder ? ' data-placeholder=\"' + options.placeholder + '\"' : ''%> style=\"width:350px;\" tabindex=\"<%=options.tabindex%>\">\n		<% _.each(options.items, function(item){ %>\n		<option value=\"<%-item.value !== undefined ? item.value : item%>\"><%-item.caption !== undefined ? item.caption : item.value || item%></option>\n		<% }); %>\n	</select>\n<% } else if(inputType === 'radio') { %>\n		<div class=\"group\">\n			<% _.each(options.items, function(item, i){ %>\n				<div class=\"option\">\n					<input id=\"radio_<%-cid%>_<%-i%>\" type=\"radio\" name=\"<%=name%>\" value=\"<%-item.value !== undefined ? item.value : item%>\" tabindex=\"<%=options.tabindex%>\" />\n					<label for=\"radio_<%-cid%>_<%-i%>\"><%-item.caption !== undefined ? item.caption : item.value || item%></label>\n				</div>\n				<% }); %>\n		</div>\n<% } else { %>\n		<div class=\"group\">\n			<% _.each(options.items, function(item, i){ %>\n				<div class=\"option\">\n					<input id=\"checkbox_<%-cid%>_<%-i%>\" type=\"checkbox\" name=\"<%=name%>\" value=\"<%-item.value !== undefined ? item.value : item%>\" tabindex=\"<%=options.tabindex%>\" />\n					<label for=\"checkbox_<%-cid%>_<%-i%>\"><%-item.caption !== undefined ? item.caption : item.value || item%></label>\n				</div>\n			<% }); %>\n		</div>\n<% } %>"),
    render: function() {
      this.$el.html(this.template(this));
      this.$content = this.$el;
      if (typeof this.onRender === "function") {
        this.onRender();
      }
      return this;
    },
    onRender: function() {
      return this.form.on('ready', this.onFormReady, this);
    },
    onFormReady: function() {
      return this.$("select.chzn-select").chosen({
        allow_single_deselect: true,
        max_selected_options: this.options.maxSelected
      });
    }
  });
  FieldsGroup = Backbone.View.extend({
    initialize: function(options) {
      this.name = (options.namePrefix ? options.namePrefix + '.' : '') + options.name;
      this.children = [];
      return this.form = this.options.form;
    },
    validate: function() {
      var j, r, res, view, _ref;
      res = [];
      _ref = this.children;
      for (j in _ref) {
        view = _ref[j];
        r = view.validate();
        if (r) {
          res = res.concat(r);
        }
      }
      if (!res) {
        return null;
      } else {
        return [].concat(res);
      }
    }
  });
  fieldTypes.Section = FieldsGroup.extend({
    className: 'section-wrapper',
    template: _.template("<% if (options.caption) { %>\n	<div class=\"group-title\"><%-options.caption%></div>\n<% } %>\n<div class=\"group-items\"></div>"),
    render: function() {
      this.$el.html(this.template(this));
      this.$content = this.$('.group-items');
      FormsEngine.buildFields(this.options.items, this);
      if (typeof this.onRender === "function") {
        this.onRender();
      }
      return this;
    },
    serialize: function() {
      var j, json, obj, view, _ref;
      json = {};
      obj = {};
      _ref = this.children;
      for (j in _ref) {
        view = _ref[j];
        _.extend(json, view.serialize());
      }
      obj[this.name] = json;
      return obj;
    }
  });
  fieldTypes.CompositeChild = FieldsGroup.extend({
    className: 'child-wrapper',
    events: {
      'click .remove-item-btn': 'removeItem'
    },
    template: _.template("<% if (options.caption) { %>\n	<h3 class=\"section-title\"><%-options.caption%></h3>\n<% } %>\n<div class=\"composite-fields\"></div>\n<div class=\"composite-controls\">\n	<button type=\"button\" class=\"btn remove-item-btn\"><i class=\"icon-minus\"></i> Remove</button>\n</div>"),
    removeItem: function(e) {
      e.preventDefault();
      return this.trigger('doRemove', this);
    },
    serialize: function() {
      var j, json, view, _ref;
      json = {};
      _ref = this.children;
      for (j in _ref) {
        view = _ref[j];
        _.extend(json, view.serialize());
      }
      return json;
    },
    render: function() {
      this.$el.html(this.template(this));
      this.$el.attr('id', this.cid);
      this.$content = this.$('.composite-fields');
      FormsEngine.buildFields(this.options.items, this);
      if (typeof this.onRender === "function") {
        this.onRender();
      }
      return this;
    }
  });
  return fieldTypes.Composite = FieldsGroup.extend({
    initialize: function(options) {
      if (!options.items) {
        options.items = [];
      }
      this.constructor.__super__.initialize.apply(this, arguments);
      return this.name = options.name;
    },
    className: 'composite-wrapper',
    children: [],
    events: {
      'click .add-item-btn': 'newItem'
    },
    newItem: function(e) {
      var form, opts, view,
        _this = this;
      e.preventDefault();
      opts = {
        items: {
          name: this.name,
          type: 'CompositeChild',
          items: this.options.fields
        }
      };
      form = this.options.form;
      this.options.items.push(opts);
      view = FormsEngine.buildFields(opts, this);
      view.once('doRemove', function() {
        view.$el.remove();
        _this.options.items.splice(view.$el.index(), 1);
        _this.children.splice(view.$el.index(), 1);
        form.$el.trigger('removeItem');
        form.trigger('schemaChanged');
        _this.updateTitle();
        return form.trigger('ready');
      });
      this.updateTitle();
      form.$el.trigger('addItem');
      form.trigger('schemaChanged');
      return form.trigger('ready');
    },
    updateTitle: function() {
      this.$el[this.options.items.length === 0 ? 'addClass' : 'removeClass']('empty');
      return this.$('.title-status').html(this.titleStatusTemplate(this));
    },
    titleStatusTemplate: _.template("(<%-options.items.length%> items)"),
    template: _.template("<div class=\"group-title\">\n	<div class=\"title-inner\"><%-options.caption%></div>\n	<div class=\"group-controls\">\n		<button type=\"button\" class=\"btn add-item-btn\"><i class=\"icon-plus\"></i> Add</button>\n		<span class=\"title-status\"><%= titleStatusTemplate(this) %></span>\n		</div>\n</div>\n<div class=\"group-items\"></div>"),
    onRender: function() {
      return this.updateTitle();
    },
    serialize: function() {
      var arr, j, json, view, _ref;
      arr = [];
      _ref = this.children;
      for (j in _ref) {
        view = _ref[j];
        arr.push(view.serialize());
      }
      json = {};
      json[this.name] = arr;
      return json;
    },
    render: function() {
      this.$el.html(this.template(this));
      this.$content = this.$('.group-items');
      FormsEngine.buildFields(this.options.items, this);
      if (typeof this.onRender === "function") {
        this.onRender();
      }
      return this;
    }
  });
})();


(function() {
  var FormView, FormsEngine, buildFields, generateField;
  FormsEngine = Backbone.FormsEngine;
  FormView = Backbone.View.extend({
    initialize: function() {
      this.tabindex = 0;
      this.children = [];
      return this.on('ready', function() {
        return this.ready = true;
      });
    },
    tagName: 'form',
    className: 'generated-form',
    events: {
      "submit": "submit"
    },
    validate: function(forceRefresh) {
      var j, r, res, view, _ref;
      res = [];
      if (forceRefresh || !this.data) {
        this.serialize();
      }
      _ref = this.children;
      for (j in _ref) {
        view = _ref[j];
        r = view.validate();
        if ((r != null) && r.length) {
          res.push(r);
        }
      }
      this.valid = !res || res.length === 0;
      this.trigger('validate');
      this.trigger('validate:' + (this.valid ? 'success' : 'fail'));
      return res;
    },
    submit: function(e) {
      var errors;
      e.preventDefault();
      errors = this.validate();
      if (errors && (errors.length > 1 || errors[0])) {
        if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
          console.log('INVALID, Errors:');
          return console.log(errors);
        }
      } else {
        return this.options.submit(this.data);
      }
    },
    template: _.template("<div class=\"form-title form-actions\"><%-options.title%></div>\n<fieldset />\n<div class=\"form-actions\">\n	<button class=\"btn-primary btn\" type=\"submit\">Send</button>\n</div>"),
    render: function() {
      this.$el.html(this.template(this));
      this.$content = this.$('fieldset');
      return this;
    },
    serialize: function() {
      var j, json, view, _ref;
      json = {};
      _ref = this.children;
      for (j in _ref) {
        view = _ref[j];
        _.extend(json, view.serialize());
      }
      return this.data = json;
    }
  });
  generateField = function(options, tabIdx, namePrefix, form) {
    var View;
    View = FormsEngine.fieldTypes[options.type];
    options.tabindex = 0;
    options.namePrefix = namePrefix;
    options.form = form;
    if (View) {
      return (new View(options)).render();
    }
    return null;
  };
  buildFields = FormsEngine.buildFields = function(schema, parent, namePrefix) {
    var fields, i, v, view;
    fields = (function() {
      var _results;
      _results = [];
      for (i in schema) {
        v = schema[i];
        view = generateField(v, i + 1, namePrefix, parent.form || parent);
        view.$el.appendTo(parent.$content);
        _results.push(parent.children.push(view));
      }
      return _results;
    })();
    if (!parent.form) {
      parent.trigger('ready');
    }
    return view;
  };
  return FormsEngine.generate = function(options) {
    var form;
    this.options = options;
    form = new FormView(this.options).render();
    form.$el.appendTo(options.target);
    buildFields(options.schema, form);
    return form;
  };
})();

})();